
# Start the project
mix phx.new phx_serve_btc --database sqlite3 --no-assets --no-dashboard --no-gettext --no-html --no-live --no-mailer

# Enter project
cd phx_serve_btc

# Create git repo (also commit changes at this point)
git init
git add .
git commit -m 'Init commit'

# Configure db
mix ecto.create

# Old commands ran...
mix phx.gen.context CandleData Bitcoin btc_candles day:date:unique open:float high:float low:float close:float volume:float currency:string
mix phx.gen.json CandleData Bitcoin btc_candles day:date:unique open:float high:float low:float close:float volume:float currency:string --no-context --no-schema


# Single json gen command (should create everything needed...)
mix phx.gen.json CandleData Bitcoin btc_candles day:date:unique open:float high:float low:float close:float volume:float currency:string

# The above command gives this output
* creating lib/phx_serve_btc_web/controllers/bitcoin_controller.ex
* creating lib/phx_serve_btc_web/controllers/bitcoin_json.ex
* creating lib/phx_serve_btc_web/controllers/changeset_json.ex
* creating test/phx_serve_btc_web/controllers/bitcoin_controller_test.exs
* creating lib/phx_serve_btc_web/controllers/fallback_controller.ex
* creating lib/phx_serve_btc/candle_data/bitcoin.ex
* creating priv/repo/migrations/20240326005152_create_btc_candles.exs
* creating lib/phx_serve_btc/candle_data.ex
* injecting lib/phx_serve_btc/candle_data.ex
* creating test/phx_serve_btc/candle_data_test.exs
* injecting test/phx_serve_btc/candle_data_test.exs
* creating test/support/fixtures/candle_data_fixtures.ex
* injecting test/support/fixtures/candle_data_fixtures.ex

Some of the generated database columns are unique. Please provide
unique implementations for the following fixture function(s) in
test/support/fixtures/candle_data_fixtures.ex:

    def unique_bitcoin_day do
      raise "implement the logic to generate a unique bitcoin day"
    end


Add the resource to your :api scope in lib/phx_serve_btc_web/router.ex:

    resources "/btc_candles", BitcoinController, except: [:new, :edit]


Remember to update your repository by running migrations:

    $ mix ecto.migrate

# Add the new files to git and commit them

# Run migration
mix ecto.migrate

# Add the following lines to the router:
    resources "/btc_candles", BitcoinController, except: [:new, :edit]
    get "/btc_month/:month", BitcoinController, :get_month
# The recources line isn't really needed just added here since the gen code already set this up for us

# Add get_month function to BitcoinController

# Add CandleData.list_btc_candles_date_range function

# Add to seeds.exs file so we can fill the data with actual btc data

# Create lib/phx_serve_btc/seed_candle_data.ex file to use in the seeds.exs script

# Seed the data:
mix run priv/repo/seeds.exs

# Verify that the api returns good data

# Now we start on getting this ready for deployment

# Generate the docker file for this

mix phx.gen.release --docker

# Output generated from the command above
* creating rel/overlays/bin/server
* creating rel/overlays/bin/server.bat
* creating rel/overlays/bin/migrate
* creating rel/overlays/bin/migrate.bat
* creating lib/phx_serve_btc/release.ex

21:23:01.280 [debug] Fetching latest image information from https://hub.docker.com/v2/namespaces/hexpm/repositories/elixir/tags?name=1.16.1-erlang-26.2.2-debian-bullseye-
* creating Dockerfile
* creating .dockerignore

Your application is ready to be deployed in a release!

See https://hexdocs.pm/mix/Mix.Tasks.Release.html for more information about Elixir releases.

Using the generated Dockerfile, your release will be bundled into
a Docker image, ready for deployment on platforms that support Docker.

For more information about deploying with Docker see
https://hexdocs.pm/phoenix/releases.html#containers

Here are some useful release commands you can run in any release environment:

    # To build a release
    mix release

    # To start your system with the Phoenix server running
    _build/dev/rel/phx_serve_btc/bin/server

    # To run migrations
    _build/dev/rel/phx_serve_btc/bin/migrate

Once the release is running you can connect to it remotely:

    _build/dev/rel/phx_serve_btc/bin/phx_serve_btc remote

To list all commands:

    _build/dev/rel/phx_serve_btc/bin/phx_serve_btc
# ----

# Build docker image
docker build .

# Create compose file to run the image

# Create data dir and copy btc file into it
mkdir data
cp bitcoin.csv data/ # Actually just move it there and update seeds to point to that file...

# Add rel/overlays/bin/seed_btc script so we can seed the prod data
# Add a function PhxServeBtc.Release.seed_btc so that we can run the seed from there

# Start the server with docker compose up --build

# Exec into the container
# docker exec -it phx_serve_btc bash

